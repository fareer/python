import requests
from lxml import etree
import csv
import threading
from queue import Queue
import time
lock = threading.Lock()
def job(x,q):
    header = {
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Accept-Encoding": "gzip, deflate, br",
        "Accept-Language": "zh-CN",
        "Cache-Control": "max-age=0",
        "User-Agent": 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:61.0) Gecko/20100101 Firefox/61.0',
        "Host": 'cn.bing.com',
        "Referer": "https://cn.bing.com/",
        "cookie": "SRCHD=AF=NOFORM; SRCHUID=V=2&GUID=0A73D56AC368483ABFA5FE515A2386F9&dmnchg=1; _EDGE_V=1; MUID=37A788B7BDC36D7819DA848EBCED6CDA; MUIDB=37A788B7BDC36D7819DA848EBCED6CDA; BFBN=gRD55EvGSCM2ALz0kTxBLbrwl9GwjnBSsveOHKRDj8bZ5A; SRCHUSR=DOB=20180727&T=1533721690000; _EDGE_S=SID=05C82EFD7C9761D72E7622BB7DB96079; _SS=SID=05C82EFD7C9761D72E7622BB7DB96079&HV=1533778955; ipv6=hit=1533782556465&t=4; SRCHHPGUSR=CW=1519&CH=315&DPR=1.25&UTC=480&WTS=63669375754"

    }
    lock.acquire()
    data = q.get(x)
    response = requests.get(data, headers=header).content.decode('utf-8')
    path = etree.HTML(response)
    bingItemList = path.xpath('/html//ol[@id="b_results"]')
    bingList = []
    for each_list in bingItemList:
        bingDict = {}
        title = each_list.xpath('.//li/h2/a/descendant::text()')
        address = each_list.xpath('.//li/h2/a/@href')
        bingDict['title'] = ''.join(title)
        bingDict['address'] = ''.join(address)
        bingList.append(bingDict)
        with open('./bing.csv', 'a', encoding='utf-8')as f:
            writer = csv.DictWriter(f, fieldnames=['title', 'address'])
            for each in bingList:
                writer.writerow(each)
                lock.release()
def geturl():
    q = Queue()
    threads = []
    urls = []
    for i in range(1,1000,10):
        url="http://cn.bing.com/search?q=%E5%91%A8%E6%9D%B0%E4%BC%A6&first="+str(i)
        urls.append(url)
    for x in urls:
        q.put(x)
    for y in range(100):
        t = threading.Thread(target=job, args=(x,q))
        t.start()
        threads.append(t)
    for thread in threads:
        thread.join()


if __name__=='__main__':
    geturl()







